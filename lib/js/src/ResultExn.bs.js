// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function getExn(r) {
  if (r.TAG === /* Ok */0) {
    return r._0;
  }
  throw r._0;
}

var ResultIsNotAnError = /* @__PURE__ */Caml_exceptions.create("ResultExn.ResultIsNotAnError");

function getErr(r) {
  if (r.TAG !== /* Ok */0) {
    return r._0;
  }
  throw {
        RE_EXN_ID: ResultIsNotAnError,
        Error: new Error()
      };
}

var mapWithDefault = Belt_Result.mapWithDefault;

var mapWithDefaultU = Belt_Result.mapWithDefaultU;

var map = Belt_Result.map;

function map2(r1, r2, f) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: Curry._2(f, r1._0, r2._0)
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

function map3(r1, r2, r3, f) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      if (r3.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: Curry._3(f, r1._0, r2._0, r3._0)
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: r3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

function map4(r1, r2, r3, r4, f) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      if (r3.TAG === /* Ok */0) {
        if (r4.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: Curry._4(f, r1._0, r2._0, r3._0, r4._0)
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: r4._0
                };
        }
      } else {
        return {
                TAG: /* Error */1,
                _0: r3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

var mapU = Belt_Result.mapU;

var flatMap = Belt_Result.flatMap;

function flatMap2(r1, r2, f) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      return Curry._2(f, r1._0, r2._0);
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

function flatMap3(r1, r2, r3, f) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      if (r3.TAG === /* Ok */0) {
        return Curry._3(f, r1._0, r2._0, r3._0);
      } else {
        return {
                TAG: /* Error */1,
                _0: r3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

function flatMap4(r1, r2, r3, r4, f) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      if (r3.TAG === /* Ok */0) {
        if (r4.TAG === /* Ok */0) {
          return Curry._4(f, r1._0, r2._0, r3._0, r4._0);
        } else {
          return {
                  TAG: /* Error */1,
                  _0: r4._0
                };
        }
      } else {
        return {
                TAG: /* Error */1,
                _0: r3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

var flatMapU = Belt_Result.flatMapU;

var getWithDefault = Belt_Result.getWithDefault;

var isOk = Belt_Result.isOk;

var isError = Belt_Result.isError;

function lift(r) {
  var errors = r.filter(Belt_Result.isError);
  if (errors.length === 0) {
    return {
            TAG: /* Ok */0,
            _0: Belt_Array.map(r, (function (el) {
                    if (el.TAG === /* Ok */0) {
                      return el._0;
                    }
                    throw el._0;
                  }))
          };
  }
  var r$1 = Belt_Option.getExn(Belt_Array.get(errors, 0));
  var tmp;
  if (r$1.TAG === /* Ok */0) {
    throw {
          RE_EXN_ID: ResultIsNotAnError,
          Error: new Error()
        };
  }
  tmp = r$1._0;
  return {
          TAG: /* Error */1,
          _0: tmp
        };
}

var TryToGettingResultFromNone = /* @__PURE__ */Caml_exceptions.create("ResultExn.TryToGettingResultFromNone");

function fromSome(o) {
  if (o !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.valFromOption(o)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: {
              RE_EXN_ID: TryToGettingResultFromNone
            }
          };
  }
}

var UnexpectedSomeValue = /* @__PURE__ */Caml_exceptions.create("ResultExn.UnexpectedSomeValue");

function fromNone(o) {
  if (o !== undefined) {
    return {
            TAG: /* Error */1,
            _0: {
              RE_EXN_ID: UnexpectedSomeValue,
              _1: Belt_Option.getWithDefault(JSON.stringify(Caml_option.valFromOption(o)), "")
            }
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  }
}

function okToOption(r) {
  if (r.TAG === /* Ok */0) {
    return Caml_option.some(r._0);
  }
  
}

function errToOption(r) {
  if (r.TAG === /* Ok */0) {
    return ;
  } else {
    return r._0;
  }
}

function catchExn(f) {
  var x;
  try {
    x = Curry._1(f, undefined);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    return {
            TAG: /* Error */1,
            _0: e
          };
  }
  return {
          TAG: /* Ok */0,
          _0: x
        };
}

function catchResult(f) {
  try {
    return Curry._1(f, undefined);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    return {
            TAG: /* Error */1,
            _0: e
          };
  }
}

exports.getExn = getExn;
exports.ResultIsNotAnError = ResultIsNotAnError;
exports.getErr = getErr;
exports.mapWithDefault = mapWithDefault;
exports.mapWithDefaultU = mapWithDefaultU;
exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.mapU = mapU;
exports.flatMap = flatMap;
exports.flatMap2 = flatMap2;
exports.flatMap3 = flatMap3;
exports.flatMap4 = flatMap4;
exports.flatMapU = flatMapU;
exports.getWithDefault = getWithDefault;
exports.isOk = isOk;
exports.isError = isError;
exports.lift = lift;
exports.TryToGettingResultFromNone = TryToGettingResultFromNone;
exports.fromSome = fromSome;
exports.UnexpectedSomeValue = UnexpectedSomeValue;
exports.fromNone = fromNone;
exports.okToOption = okToOption;
exports.errToOption = errToOption;
exports.catchExn = catchExn;
exports.catchResult = catchResult;
/* No side effect */

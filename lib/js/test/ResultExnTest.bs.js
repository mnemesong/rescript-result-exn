// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ResultExn = require("../src/ResultExn.bs.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Mocha$RescriptMocha = require("rescript-mocha/lib/js/src/Mocha.bs.js");
var Assert$RescriptMocha = require("rescript-mocha/lib/js/src/Assert.bs.js");

var TestExn = /* @__PURE__ */Caml_exceptions.create("ResultExnTest.TestExn");

Mocha$RescriptMocha.describe("test ResultExn")(undefined, undefined, undefined, (function (param) {
        Mocha$RescriptMocha.describe("test getExn")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.equal(undefined, ResultExn.getExn({
                                  TAG: /* Ok */0,
                                  _0: "sadk"
                                }), "sadk");
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          RE_EXN_ID: TestExn
                        };
                        var val;
                        try {
                          val = ResultExn.getExn(given);
                        }
                        catch (raw_e){
                          var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                          return Assert$RescriptMocha.deep_equal(undefined, e, nominal);
                        }
                        throw {
                              RE_EXN_ID: TestExn,
                              Error: new Error()
                            };
                      }));
              }));
        Mocha$RescriptMocha.describe("test getErr")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        try {
                          ResultExn.getErr({
                                TAG: /* Ok */0,
                                _0: "sadk"
                              });
                          throw {
                                RE_EXN_ID: TestExn,
                                Error: new Error()
                              };
                        }
                        catch (raw_exn){
                          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                          if (exn.RE_EXN_ID === ResultExn.ResultIsNotAnError) {
                            return Assert$RescriptMocha.ok(true);
                          }
                          throw {
                                RE_EXN_ID: TestExn,
                                Error: new Error()
                              };
                        }
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          RE_EXN_ID: TestExn
                        };
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.getErr(given), nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test map")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var result = ResultExn.map({
                              TAG: /* Ok */0,
                              _0: 12
                            }, (function (x) {
                                return (x << 1);
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: 24
                            });
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map(given, (function (x) {
                                return (x << 1);
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test map2")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var result = ResultExn.map2({
                              TAG: /* Ok */0,
                              _0: 12
                            }, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, (function (x, y) {
                                return x + y | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: 19
                            });
                      }));
                Mocha$RescriptMocha.it("negative 1")(undefined, undefined, undefined, (function (param) {
                        var given1 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map2(given1, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, (function (x, y) {
                                return x + y | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative 2")(undefined, undefined, undefined, (function (param) {
                        var given2 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map2({
                              TAG: /* Ok */0,
                              _0: 7
                            }, given2, (function (x, y) {
                                return x + y | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative 3")(undefined, undefined, undefined, (function (param) {
                        var given2 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var given1 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map2(given1, given2, (function (x, y) {
                                return x + y | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test map3")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var result = ResultExn.map3({
                              TAG: /* Ok */0,
                              _0: 12
                            }, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, {
                              TAG: /* Ok */0,
                              _0: 3
                            }, (function (x, y, z) {
                                return (x + y | 0) + z | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: 22
                            });
                      }));
                Mocha$RescriptMocha.it("negative 1")(undefined, undefined, undefined, (function (param) {
                        var given1 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map3(given1, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, {
                              TAG: /* Ok */0,
                              _0: 3
                            }, (function (x, y, z) {
                                return (x + y | 0) + z | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative 2")(undefined, undefined, undefined, (function (param) {
                        var given2 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map3({
                              TAG: /* Ok */0,
                              _0: 12
                            }, given2, {
                              TAG: /* Ok */0,
                              _0: 3
                            }, (function (x, y, z) {
                                return (x + y | 0) + z | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative 3")(undefined, undefined, undefined, (function (param) {
                        var given1 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var given3 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.map3(given1, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, given3, (function (x, y, z) {
                                return (x + y | 0) + z | 0;
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test flatMap")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var result = ResultExn.flatMap({
                              TAG: /* Ok */0,
                              _0: 12
                            }, (function (x) {
                                return {
                                        TAG: /* Ok */0,
                                        _0: (x << 1)
                                      };
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: 24
                            });
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.flatMap(given, (function (x) {
                                return {
                                        TAG: /* Ok */0,
                                        _0: (x << 1)
                                      };
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test flatMap2")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var result = ResultExn.flatMap2({
                              TAG: /* Ok */0,
                              _0: 12
                            }, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, (function (x, y) {
                                return {
                                        TAG: /* Ok */0,
                                        _0: x + y | 0
                                      };
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, {
                              TAG: /* Ok */0,
                              _0: 19
                            });
                      }));
                Mocha$RescriptMocha.it("negative 1")(undefined, undefined, undefined, (function (param) {
                        var given1 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.flatMap2(given1, {
                              TAG: /* Ok */0,
                              _0: 7
                            }, (function (x, y) {
                                return {
                                        TAG: /* Ok */0,
                                        _0: x + y | 0
                                      };
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative 2")(undefined, undefined, undefined, (function (param) {
                        var given2 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.flatMap2({
                              TAG: /* Ok */0,
                              _0: 7
                            }, given2, (function (x, y) {
                                return {
                                        TAG: /* Ok */0,
                                        _0: x + y | 0
                                      };
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative 3")(undefined, undefined, undefined, (function (param) {
                        var given2 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var given1 = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var result = ResultExn.flatMap2(given1, given2, (function (x, y) {
                                return {
                                        TAG: /* Ok */0,
                                        _0: x + y | 0
                                      };
                              }));
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test liftArr")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var given = [
                          {
                            TAG: /* Ok */0,
                            _0: 12
                          },
                          {
                            TAG: /* Ok */0,
                            _0: 123
                          }
                        ];
                        var result = ResultExn.lift(given);
                        var nominal = {
                          TAG: /* Ok */0,
                          _0: [
                            12,
                            123
                          ]
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = [
                          {
                            TAG: /* Ok */0,
                            _0: 12
                          },
                          {
                            TAG: /* Error */1,
                            _0: {
                              RE_EXN_ID: TestExn
                            }
                          }
                        ];
                        var result = ResultExn.lift(given);
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        Assert$RescriptMocha.deep_equal(undefined, result, nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test fromSome")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.fromSome(102), {
                              TAG: /* Ok */0,
                              _0: 102
                            });
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: ResultExn.TryToGettingResultFromNone
                          }
                        };
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.fromSome(undefined), nominal);
                      }));
              }));
        Mocha$RescriptMocha.describe("test fromNone")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        var nominal = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: ResultExn.UnexpectedSomeValue,
                            _1: "102"
                          }
                        };
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.fromNone(102), nominal);
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.fromNone(undefined), {
                              TAG: /* Ok */0,
                              _0: undefined
                            });
                      }));
              }));
        Mocha$RescriptMocha.describe("test okToOption")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.okToOption({
                                  TAG: /* Ok */0,
                                  _0: 102
                                }), 102);
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.okToOption(given), undefined);
                      }));
              }));
        Mocha$RescriptMocha.describe("test errToOption")(undefined, undefined, undefined, (function (param) {
                Mocha$RescriptMocha.it("positive")(undefined, undefined, undefined, (function (param) {
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.errToOption({
                                  TAG: /* Ok */0,
                                  _0: 102
                                }), undefined);
                      }));
                Mocha$RescriptMocha.it("negative")(undefined, undefined, undefined, (function (param) {
                        var given = {
                          TAG: /* Error */1,
                          _0: {
                            RE_EXN_ID: TestExn
                          }
                        };
                        var nominal = {
                          RE_EXN_ID: TestExn
                        };
                        Assert$RescriptMocha.deep_equal(undefined, ResultExn.errToOption(given), nominal);
                      }));
              }));
      }));

exports.TestExn = TestExn;
/*  Not a pure module */
